---
description: Rules for maintaining consistent domain vocabulary and ubiquitous language
glob: **/*.md
alwaysApply: true
---
name: "Vocabulary Management"

# Domain Vocabulary Management

## Purpose
Maintain a consistent ubiquitous language across the project by tracking and organizing domain-specific terms, concepts, and relationships.

We use this vocabulary to write documents and software that is easy to understand and use.  

## Vocabulary Structure

Vocabularies are used to create Subject-Based Messaging structures according to Domain Driven Design (DDD).

### Term Categories
1. **Domain Objects**
   - Aggregates
   - Entities
   - Value Objects
   - Services

2. **Technical Concepts**
   - Patterns
   - Architectures
   - Protocols
   - Algorithms

3. **Business Concepts**
   - Processes
   - Rules
   - Workflows
   - Policies

4. **Cross-Cutting Terms**
   - Security
   - Configuration
   - Monitoring
   - Events

## Ontology Organization

### Primary Taxonomies
1. **Storage Taxonomy**
   - Storage Operations
   - Location Management
   - Integrity Verification
   - Quota Management
   - Access Patterns

2. **Media Taxonomy**
   - Audio Files
   - Metadata
   - Collections
   - Import Profiles
   - Processing Rules

3. **UI Taxonomy**
   - Windows
   - Dialogs
   - Themes
   - Layouts
   - Components

4. **Configuration Taxonomy**
   - Settings
   - Preferences
   - States
   - Security

### Relationship Types
1. **Hierarchical**
   - Is-A
   - Part-Of
   - Contains
   - Extends

2. **Functional**
   - Manages
   - Processes
   - Validates
   - Configures

3. **Temporal**
   - Precedes
   - Follows
   - Triggers
   - Depends-On

## Documentation Rules

### Term Definition
```markdown
### Term: [Term Name]
- **Category**: [Domain Object|Technical Concept|Business Concept|Cross-Cutting]
- **Type**: [Aggregate|Entity|Value Object|Service|etc.]
- **Taxonomy**: [Primary taxonomy this belongs to]
- **Definition**: Clear, concise definition
- **Relationships**:
  * [Relationship Type]: Related terms
- **Usage Context**: Where/how this term is used
- **Code Reference**: Link to implementing code (if applicable)
```

### Knowledge Graph
- Terms must be connected to at least one other term
- Relationships must be explicitly defined
- Circular dependencies must be documented
- Terms should reference their implementation

## Maintenance

### Term Addition Process
1. Identify new term
2. Categorize appropriately
3. Define relationships
4. Document usage
5. Update knowledge graph
6. Cross-reference code

### Term Review Process
1. Regular review schedule
2. Check for consistency
3. Validate relationships
4. Update definitions
5. Remove obsolete terms

### Version Control
1. Track term changes
2. Document term evolution
3. Maintain history
4. Handle deprecation

rules:
  - name: "Term Definition Format"
    pattern: "### Term:"
    ensure:
      - "Follows term definition template"
      - "Includes all required sections"
      - "Links to related terms"
    message: "Term definitions must follow the standard format"
    severity: "error"

  - name: "Taxonomy Consistency"
    pattern: "\\*\\*Taxonomy\\*\\*:"
    ensure:
      - "Uses defined taxonomies"
      - "Maintains hierarchy"
      - "Links related terms"
    message: "Terms must belong to defined taxonomies"
    severity: "error"

  - name: "Relationship Validity"
    pattern: "\\*\\*Relationships\\*\\*:"
    ensure:
      - "Uses defined relationship types"
      - "Links to existing terms"
      - "Maintains consistency"
    message: "Relationships must use defined types and link to existing terms"
    severity: "error"

  - name: "Knowledge Graph Integrity"
    pattern: "\\*\\*Usage Context\\*\\*:"
    ensure:
      - "References implementation"
      - "Documents context"
      - "Maintains connections"
    message: "Terms must maintain knowledge graph integrity"
    severity: "warning"

suggestions:
  - when: "adding_term"
    suggest: |
      1. Check existing taxonomies
      2. Use standard definition format
      3. Define clear relationships
      4. Document usage context
      5. Update related terms
      6. Verify knowledge graph

  - when: "updating_term"
    suggest: |
      1. Review existing relationships
      2. Update affected terms
      3. Maintain consistency
      4. Document changes
      5. Update knowledge graph

  - when: "removing_term"
    suggest: |
      1. Document reason
      2. Update related terms
      3. Maintain graph integrity
      4. Archive definition
      5. Update documentation 

# Domain Vocabulary Syntax (Cypher-Compatible)

## Node (Term) Syntax
(:Label1:Label2 {prop1: value, prop2: value})

## Relationship Syntax
-[:TYPE {props}]->

## Full Pattern
(:Label1 {props})-[:RELATIONSHIP_TYPE {props}]->(:Label2 {props})

## Examples

# Domain Objects
(:Entity:Aggregate {type: "customer", status: "active"})
-[:OWNS {since: "2023"}]->
(:Entity {balance: 1000})

# Technical Concepts
(:Service {version: "1.21"})
-[:ROUTES {protocol: "http"}]->
(:Interface {path: "/api/v1"})

# Business Rules
(:Aggregate {status: "pending"})
-[:TRIGGERS {condition: "paid"}]->
(:Process {method: "express"})

## Complex Example
(:Order:Aggregate {status: "new"})
-[:TRIGGERS {condition: "paid", priority: "high"}]->
(:Shipment:Process {method: "express"}) 