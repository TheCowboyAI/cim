{
  description = "CIM - The Composable Information Machine";

  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
    flake-utils.url = "github:numtide/flake-utils";
    rust-overlay = {
      url = "github:oxalica/rust-overlay";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    cim-network = {
      url = "github:TheCowboyAI/cim-network";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = {
    self,
    nixpkgs,
    flake-utils,
    rust-overlay,
    cim-network,
  }:
    flake-utils.lib.eachDefaultSystem
    (
      system: let
        overlays = [(import rust-overlay)];
        pkgs = import nixpkgs {
          inherit system overlays;
          config.allowUnfree = true;
        };

        rustToolchain = pkgs.pkgsBuildHost.rust-bin.fromRustupToolchainFile ./rust-toolchain.toml;
        
        # Build cim-network package
        cim-network-pkg = pkgs.rustPlatform.buildRustPackage {
          pname = "cim-network";
          version = "0.1.0";
          
          src = cim-network;
          
          cargoLock = {
            lockFile = "${cim-network}/Cargo.lock";
          };
          
          buildInputs = with pkgs; [
            openssl
          ];
          
          nativeBuildInputs = with pkgs; [
            pkg-config
          ];
          
          # Skip tests during build as they require NATS
          doCheck = false;
        };

      in {
        # Package outputs
        packages = {
          cim-network = cim-network-pkg;
          default = cim-network-pkg;
        };
        
        # NixOS Module
        nixosModules.cim-network = ./nix/modules/cim-network.nix;

        # Development shell
        devShells.default = pkgs.mkShell {
          buildInputs = with pkgs; [
            rustToolchain
            rust-analyzer
            cargo-edit
            cargo-expand
            cargo-udeps
            cargo-whatfeatures
            openssl
            openssl.dev
            pkg-config
            zlib.dev
            nodejs
            direnv
            zsh
            git
            act
            starship
            # Include cim-network in dev shell
            cim-network-pkg
          ];

          RUST_SRC_PATH = pkgs.rustPlatform.rustLibSrc;
        };
      }
    );
}