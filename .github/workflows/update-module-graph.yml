name: Update Module Graph

on:
  workflow_dispatch:
    inputs:
      module_name:
        description: 'Module name that was updated'
        required: true
      commit_hash:
        description: 'Latest commit hash'
        required: true
      version:
        description: 'Module version'
        required: false
  repository_dispatch:
    types: [module-commit]

jobs:
  update-graph:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
          
      - name: Update Module Graph
        env:
          MODULE_NAME: ${{ github.event.inputs.module_name || github.event.client_payload.module }}
          COMMIT_HASH: ${{ github.event.inputs.commit_hash || github.event.client_payload.commit }}
          VERSION: ${{ github.event.inputs.version || github.event.client_payload.version }}
          TIMESTAMP: ${{ github.event.client_payload.timestamp || '' }}
        run: |
          echo "Updating graph for module: $MODULE_NAME"
          echo "Commit: $COMMIT_HASH"
          echo "Version: $VERSION"
          
          # Update the JSON graph
          GRAPH_FILE="registry/modules-graph.json"
          TEMP_FILE="registry/modules-graph.tmp.json"
          
          # Update module node with new git info
          jq --arg module "$MODULE_NAME" \
             --arg commit "$COMMIT_HASH" \
             --arg version "$VERSION" \
             --arg timestamp "$(date -Iseconds)" \
             '.graph.nodes[$module].git.latest_commit = $commit |
              .graph.nodes[$module].git.last_updated = $timestamp |
              if $version != "" then .graph.nodes[$module].version.current = $version else . end |
              .graph.metadata.last_updated = $timestamp' \
             "$GRAPH_FILE" > "$TEMP_FILE"
          
          mv "$TEMP_FILE" "$GRAPH_FILE"
          
      - name: Query Module Details
        uses: actions/github-script@v7
        id: module-details
        env:
          MODULE_NAME: ${{ env.MODULE_NAME }}
        with:
          script: |
            const moduleName = process.env.MODULE_NAME;
            try {
              // Get repository info
              const repo = await github.rest.repos.get({
                owner: 'thecowboyai',
                repo: moduleName
              });
              
              // Get latest release
              let latestRelease = null;
              try {
                const releases = await github.rest.repos.getLatestRelease({
                  owner: 'thecowboyai',
                  repo: moduleName
                });
                latestRelease = releases.data.tag_name;
              } catch (e) {
                console.log('No releases found');
              }
              
              // Get tags
              const tags = await github.rest.repos.listTags({
                owner: 'thecowboyai',
                repo: moduleName,
                per_page: 10
              });
              
              return {
                description: repo.data.description,
                topics: repo.data.topics,
                latest_tag: tags.data[0]?.name || null,
                latest_release: latestRelease,
                default_branch: repo.data.default_branch
              };
            } catch (error) {
              console.error('Error fetching module details:', error);
              return null;
            }
            
      - name: Update Graph with Repository Details
        if: steps.module-details.outputs.result != 'null'
        run: |
          DETAILS='${{ steps.module-details.outputs.result }}'
          MODULE_NAME="${{ env.MODULE_NAME }}"
          
          # Parse the JSON details
          LATEST_TAG=$(echo "$DETAILS" | jq -r '.latest_tag // empty')
          
          # Update graph with additional details
          if [ -n "$LATEST_TAG" ]; then
            jq --arg module "$MODULE_NAME" \
               --arg tag "$LATEST_TAG" \
               '.graph.nodes[$module].git.latest_tag = $tag' \
               registry/modules-graph.json > registry/modules-graph.tmp.json
            mv registry/modules-graph.tmp.json registry/modules-graph.json
          fi
          
      - name: Generate Graph Visualization
        run: |
          # Create a Mermaid graph from the JSON
          node scripts/generate-graph-viz.js > registry/modules-graph.mmd
          
      - name: Update Catalog
        run: |
          # Sync any changes to the human-readable catalog
          ./scripts/sync-catalog.sh
          
      - name: Commit Graph Updates
        uses: EndBug/add-and-commit@v9
        with:
          message: 'chore: update module graph - ${{ env.MODULE_NAME }} (${{ env.COMMIT_HASH }})'
          add: |
            registry/modules-graph.json
            registry/modules-graph.mmd
            doc/cim_modules_catalog.md