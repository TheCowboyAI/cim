//! Source tracking module
//!
//! This module provides functionality for tracking the origin
//! of terms and relationships in ontologies.

use uuid::Uuid;
use chrono::{DateTime, Utc};
use serde::{Serialize, Deserialize};

/// Source type for ontological entities
#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum SourceType {
    /// Manually added by a user
    Manual,
    /// Extracted from a file
    File(String),
    /// Extracted from an API
    API(String),
    /// Imported from another ontology
    Ontology(Uuid),
    /// Generated by an algorithm
    Algorithm(String),
    /// Referenced from a publication
    Publication(String),
    /// Other source with description
    Other(String),
}

/// Source information for ontological entities
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Source {
    /// Type of source
    pub source_type: SourceType,
    /// When the entity was created
    pub created_at: DateTime<Utc>,
    /// Optional user who created the entity
    pub created_by: Option<String>,
    /// Optional confidence score (0.0-1.0)
    pub confidence: Option<f64>,
    /// Optional additional context
    pub context: Option<String>,
}

impl Source {
    /// Create a new manual source
    pub fn manual(user: Option<String>) -> Self {
        Self {
            source_type: SourceType::Manual,
            created_at: Utc::now(),
            created_by: user,
            confidence: Some(1.0),
            context: None,
        }
    }

    /// Create a source from a file
    pub fn from_file(file_path: String) -> Self {
        Self {
            source_type: SourceType::File(file_path),
            created_at: Utc::now(),
            created_by: None,
            confidence: None,
            context: None,
        }
    }

    /// Create a source from an API
    pub fn from_api(api_name: String) -> Self {
        Self {
            source_type: SourceType::API(api_name),
            created_at: Utc::now(),
            created_by: None,
            confidence: None,
            context: None,
        }
    }

    /// Create a source from another ontology
    pub fn from_ontology(ontology_id: Uuid) -> Self {
        Self {
            source_type: SourceType::Ontology(ontology_id),
            created_at: Utc::now(),
            created_by: None,
            confidence: None,
            context: None,
        }
    }

    /// Create a source from an algorithm
    pub fn from_algorithm(algorithm_name: String) -> Self {
        Self {
            source_type: SourceType::Algorithm(algorithm_name),
            created_at: Utc::now(),
            created_by: None,
            confidence: None,
            context: None,
        }
    }

    /// Create a source from a publication
    pub fn from_publication(publication_ref: String) -> Self {
        Self {
            source_type: SourceType::Publication(publication_ref),
            created_at: Utc::now(),
            created_by: None,
            confidence: None,
            context: None,
        }
    }

    /// Set the confidence level
    pub fn with_confidence(mut self, confidence: f64) -> Self {
        self.confidence = Some(confidence.max(0.0).min(1.0));
        self
    }

    /// Set the context
    pub fn with_context(mut self, context: String) -> Self {
        self.context = Some(context);
        self
    }
} 